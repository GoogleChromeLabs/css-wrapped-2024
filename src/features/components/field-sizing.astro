---
import FeatureLayout from "./../_layout.astro";
import Author from "../../components/author.astro";
import Video from "../../components/video.astro";
import CodePen from "../../components/codepen.astro";
import { Code } from "astro:components";

import slugify from "./../../util/slugify";

export const title = "Field Sizing";
const slug = slugify(title);
---

<FeatureLayout>
  <header>
    <h3 id={slug} set:html={title} />
    <Author name="adam" />
    <div class="support">
      <baseline-status featureId="field-sizing"></baseline-status>
    </div>
  </header>
  <p>
    Without <code>field-sizing</code>, to create a content-sized input field you
    had to either guess at an average size of a text field input or use
    JavaScript to count characters and increase the element height or width as
    the user entered text. <b>Now it's a CSS one-liner.</b>
  </p>
  <Code
    lang="css"
    theme="css-variables"
    code={`textarea, select, input {
  field-sizing: content;
}`}
  />
  <p>
    The following video demonstrates how a <code>textarea</code>, <code
      >select</code
    >, and <code>input</code> can now shrink to fit the size of the placeholder or
    content value.
  </p>
  <Video src="/video/field-sizing.mp4" />
  <p>
    The following demo offers a side by side comparison of how inputs behave
    without <code>field-sizing</code> and with <code>field-sizing</code>.
  </p>
  <CodePen id="web-dot-dev/poYmRvp" height={500} />
  <p>
    This will work for any font, any font size, any language and any writing
    mode. What used to be high effort will now be low effort.
  </p>
  <footer>
    <a href="https://codepen.io/web-dot-dev/pen/poYmRvp">Try demo</a>
    <div class="articles">
      <a href="https://developer.chrome.com/docs/css-ui/css-field-sizing"
        >Article on developer.chrome.com</a
      >
      <a href="https://developer.mozilla.org/docs/Web/CSS/field-sizing">MDN</a>
    </div>
  </footer>
</FeatureLayout>
