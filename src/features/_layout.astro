---
interface Props {
  slug: string;
}

const { slug } = Astro.props;
---

<article id={slug}>
  <slot />
</article>

<style>
  @keyframes feature-header {
    to {
      transform: translateX(5ch);
    }
  }

  @keyframes mobile-sticky-adjustment {
    to {
      transform: translateX(var(--size-7)) scale(0.7);
    }
  }

  @layer components.feature {
    article {
      --_inline-padding: var(--size-8);

      display: grid;
      gap: var(--size-7);
      padding-block: var(--size-7);
      padding-inline: var(--_inline-padding);
      border: 1px solid var(--surface-2);
      background: var(--surface-1);
      border-radius: var(--radius-3);
      font-weight: 300;

      /* content-visibility: auto;
      contain-intrinsic-block-size: 100vh; */

      @media (width <= 720px) {
        gap: var(--size-5);
        padding-block: var(--size-5);
      }

      @media (width <= 480px) {
        --_inline-padding: var(--size-3);
        gap: var(--size-3);
        padding-block: var(--size-3);
      }

      &:target {
        scroll-margin-block-start: var(--size-9);
      }

      h3 {
        font-family: "Fight", "Fight Fallback";
        text-transform: lowercase;
        font-weight: normal;
        line-height: 0.75;
        font-size: var(--font-size-8);

        text-shadow: 0 4px 0 light-dark(var(--gray-3), var(--gray-11));

        @media (width > 650px) {
          position: sticky;
          top: var(--size-2);
          z-index: 1;
        }

        /* @media (width <= 540px) {
          @supports (animation-timeline: view()) {
            @media (prefers-reduced-motion: no-preference) {
              animation: mobile-sticky-adjustment ease-out both;
              animation-timeline: view();
              animation-range: exit-crossing calc(var(--size-3) * -1)
                exit-crossing var(--size-5);
              animation-timeline: var(--vt-name);
              transform-origin: left top;
            }
          }
        } */

        > code {
          font-size: 0.6em;
          text-shadow: none;
        }

        > a {
          scroll-margin-block-start: var(--size-3);
        }
      }

      > p {
        max-inline-size: 100%;
      }

      > footer > a {
        background: var(--link);
        color: light-dark(white, black);
        padding-block: var(--size-2);
        padding-inline: var(--size-3);
        border-radius: var(--radius-2);
        box-shadow: var(--shadow-3);
        font-weight: bold;

        transition: transform 0.7s var(--ease-spring-2);

        &:is(:hover, :focus-visible) {
          text-decoration: none;
        }

        &:not(:active):is(:hover, :focus-visible) {
          transform: scale(1.1);
        }
      }

      > footer:not(footer:has(> ul)) {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: var(--size-2);
        border-block-start: 1px solid var(--surface-2);
        padding-block-start: var(--size-6);

        > .articles {
          display: flex;
          flex-wrap: wrap;
          gap: var(--size-2) var(--_inline-padding);

          > a {
            white-space: nowrap;
          }
        }
      }

      & .resources {
        display: grid;
        gap: var(--size-3);
        padding-block: var(--size-4);

        > p {
          text-transform: uppercase;
          font-size: var(--font-size-0);
          font-weight: bold;

          display: flex;
          place-items: center;
          gap: var(--size-2);

          > svg {
            block-size: var(--size-relative-8);
            inline-size: var(--size-relative-8);
            color: var(--text-2);
          }
        }

        > ul {
          display: grid;
          gap: var(--size-3);
          padding-inline: var(--size-3);

          > li {
            padding-inline-start: 0;
            max-inline-size: none;
          }
        }
      }

      & .support {
        display: grid;
        gap: var(--size-3);
        background: light-dark(white, var(--gray-10));
        margin-inline: calc(var(--_inline-padding) * -1);
        padding-inline: var(--_inline-padding);
        padding-block: var(--size-6) var(--size-3);

        > baseline-status {
          padding: 0;
        }
      }
    }
  }
</style>
