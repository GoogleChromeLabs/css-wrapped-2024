---
import "../styles/global.css";
import slugify from "./../util/slugify";

import PrimaryNav from "../components/nav.primary.astro";
import Hero from "../components/hero.astro";
import FeatureFilmstrip from "../components/feature.filmstrip.astro";
import Biomes from "../components/biomes.astro";
import Footer from "../components/footer.astro";
import AsideNav from "../components/nav.aside.astro";
import CookieConsent from "../components/cookieconsent.astro";

import * as FieldSizing from "../features/components/field-sizing.astro";
import * as AnimateToHeightAuto from "../features/components/animate-to-height-auto.astro";
import * as ExclusiveDetails from "../features/components/exclusive-details.astro";
import * as StyleableDetails from "../features/components/styleable-details.astro";
import * as AnchorPositioning from "../features/components/anchor-positioning.astro";

import * as BackdropInheritance from "../features/developerexperience/backdrop-inheritance.astro";
import * as LightDarkFunction from "../features/developerexperience/light-dark.astro";
import * as AtProperty from "../features/developerexperience/at-property.astro";
import * as Popover from "../features/developerexperience/popover.astro";
import * as StartingStyle from "../features/developerexperience/starting-style.astro";
import * as RubyAlign from "../features/developerexperience/ruby-align.astro";
import * as PaintOrder from "../features/developerexperience/paint-order.astro";
import * as CSSOMNestedDeclarations from "../features/developerexperience/cssom-nested-declarations.astro";

import * as ScrollbarStyling from "../features/interactions/scrollbar-styling.astro";
import * as ViewTransitionsMPA from "../features/interactions/view-transitions-mpa.astro";
import * as ScrollDrivenAnimations from "../features/interactions/scroll-driven-animations.astro";
import * as ScrollSnapEvents from "../features/interactions/scroll-snap-events.astro";

const biomes = [
  {
    title: "Components",
    description: `<p>We traveled <b>over the mountains</b> to bring  
    <a href="#anchor-positioning">exciting overlay UX with anchor</a>, 
    the power to <a href="#animate-to-height-auto">animate to height auto</a>, 
    easily turn <a href="#exclusive-details">details into an accordion<a>, 
    get more access to <a href="#styleable-details">details styling</a>,
    and <a href="#field-sizing">intrinsically sized form elements</a>!</p>`,
    backdrop: "desert",
    image: "./biomes/desert.png",
    features: [
      FieldSizing,
      AnimateToHeightAuto,
      ExclusiveDetails,
      StyleableDetails,
      AnchorPositioning,
    ],
  },
  {
    title: "Interactions",
    description: `<b>Through the forest</b> we found features for <a href="#custom-scrollbars">styling the scrollbar</a>, 
      using <a href="#crossdocument-view-transitions">multi-page view transitions</a>, 
      <a href="#scrolldriven-animations">creating scroll animations</a> and even 
      <a href="#scroll-snap-events">events for scroll snap</a>!`,
    backdrop: "arctic",
    image: "./biomes/arctic.png",
    features: [
      ScrollbarStyling,
      ViewTransitionsMPA,
      ScrollDrivenAnimations,
      ScrollSnapEvents,
    ],
  },
  {
    title: "Developer Experience",
    description: `<p>Things get even easier after we travelled <b>across the seas.</b></p>

      <p>We discovered ways to simplify <a href="#backdrop-inheritance">backdrop inheritance</a>, 
      a magic color function called <a href="#lightdark">light-dark()</a>, 
      safer and smarter variables with <a href="#property">@property</a>, 
      a way to specify a <a href="#startingstyle">starting style for transitions</a>,
      ways to <a href="#popover">pop into the top-layer</a>, 
      improved <a href="#rubyalign">ruby alignment</a>, 
      options for <a href="#paintorder">layering text strokes with text fill</a>, 
      and even <a href="#cssom-nested-declarations">more ways to relax CSS nesting</a>!</p>`,
    backdrop: "jungle",
    image: "./biomes/jungle.png",
    features: [
      BackdropInheritance,
      LightDarkFunction,
      AtProperty,
      Popover,
      StartingStyle,
      RubyAlign,
      PaintOrder,
      CSSOMNestedDeclarations,
    ],
  },
];

// Flatten all Biome features to a list of CSS timeline names
const timelines = biomes.reduce(
  (timelines, biome) => [
    `--vtl--${slugify(biome.title)}`,
    ...biome.features.map(
      (feature) => `--vtl--${slugify(biome.title)}--${slugify(feature.title)}`
    ),
    ...timelines,
  ],
  []
);
---

<!--
 Copyright 2024 Google LLC
 SPDX-License-Identifier: Apache-2.0
--><html lang="en" style="view-transition-name: none">{/* remove the VT until the clientside theme switch is loaded so we dont flash a VT  */}
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="./favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <title>CSS Wrapped 2024</title>
    <link
      rel="preload"
      href="./fight.otf"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />
    <script type="module" src="./baseline-status.min.js"></script>
  </head>
  <body>
    <PrimaryNav />
    <Hero biomes={biomes} />
    {/* <FeatureFilmstrip biomes={biomes} />  */}

    <main style={`timeline-scope: ${timelines.join(", ")}`}>
      <AsideNav biomes={biomes} />
      <Biomes biomes={biomes} />
    </main>

    <Footer />
    <CookieConsent />
  </body>
</html>

<style>
  @layer components.main {
    main {
      display: grid;
      gap: var(--size-4);
      grid-template-areas: ". main-features main-sidenav .";
      grid-template-columns:
        [fullbleed-start]
        auto
        fit-content(80ch)
        minmax(0, 30ch)
        auto
        [fullbleed-end];

      @media (width <= 1200px) {
        grid-template-areas: ". main-features .";
        grid-template-columns:
          [fullbleed-start]
          auto
          fit-content(80ch)
          auto
          [fullbleed-end];
      }
    }
  }
</style>

<script async src="https://www.googletagmanager.com/gtag/js?id=G-754F24EHD8"
></script>
<script is:inline>
  window.dataLayer = window.dataLayer || [];
  function gtag() {
    dataLayer.push(arguments);
  }
  gtag("js", new Date());
  gtag("config", "G-754F24EHD8");
</script>
