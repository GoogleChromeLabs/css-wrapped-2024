---
import slugify from "./../util/slugify";
import shuffle from "./../util/shuffle";

const { biomes } = Astro.props;

// Flatten all Biome features to one flat array
const features = biomes
  .reduce((features, biome) => [...features, ...biome.features], [])
  .map((feature) => feature.title);
---

<div class="feature-grid">
  <div class="row">
    {
      shuffle(features)
        .slice(0, 18)
        .map((feature) => (
          <a class="card" href={`#${slugify(feature)}`} set:html={feature} />
        ))
    }
  </div>
  <div class="row">
    {
      shuffle(features)
        .slice(0, 18)
        .map((feature) => (
          <a class="card" href={`#${slugify(feature)}`} set:html={feature} />
        ))
    }
  </div>
  <div class="row">
    {
      shuffle(features)
        .slice(0, 18)
        .map((feature) => (
          <a class="card" href={`#${slugify(feature)}`} set:html={feature} />
        ))
    }
  </div>
</div>

<style>
  @keyframes pan-x {
    from {
      transform: translateX(var(--_pan-lower, -15vw));
    }
    to {
      transform: translateX(var(--_pan-upper, 5vw));
    }
  }

  @layer components.feature-filmstrip {
    .feature-grid {
      display: grid;
      place-content: center;
      gap: var(--size-3);
      padding-block: var(--size-10) var(--size-13);
      max-inline-size: 100vw;
      overflow: clip;

      > .row {
        display: grid;
        grid-auto-flow: column;
        place-content: center;
        gap: var(--size-3);

        @media (prefers-reduced-motion: no-preference) {
          @supports (animation-timeline: view()) {
            animation: pan-x linear both;
            animation-timeline: view(block);
          }
        }

        &:nth-child(2n-1) {
          animation-direction: reverse;
        }

        &:nth-child(3) {
          --_pan-lower: -20vw;
          --_pan-upper: 15vw;
        }

        > .card {
          white-space: nowrap;
          padding-block: var(--size-2);
          padding-inline: var(--size-3);
          background: var(--surface-1);
          border-radius: var(--radius-round);
          border: 1px solid var(--surface-2);

          display: inline-grid;
          font-size: var(--font-size-3);

          &:not(:hover) {
            color: var(--text-1);
          }
        }
      }
    }
  }
</style>
