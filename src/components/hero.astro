---
import { Icon } from "astro-icon/components";
import NavBento from "./nav.bento.astro";
---

<section class="hero">
  <h1 class="retro-title">CSS Wrapped <span>2024</span></h1>
  <div class="grid-pile">
    <div class="particles" id="particles">
      <span class="pixel"></span>
      <span class="pixel"></span>
      <span class="pixel"></span>
      <span class="pixel"></span>
      <span class="pixel"></span>
      <span class="pixel"></span>
      <span class="pixel"></span>
      <span class="pixel"></span>
      <span class="pixel"></span>
      <span class="pixel"></span>
      <span class="pixel"></span>
      <span class="pixel"></span>
      <span class="plus"></span>
      <span class="plus"></span>
      <span class="plus"></span>
      <span class="plus"></span>
      <span class="plus"></span>
      <span class="plus"></span>
      <span class="star"></span>
      <span class="star"></span>
      <span class="star"></span>
    </div>
    <div class="video">
      <Icon name="play" />
    </div>
  </div>
  <div>
    <p class="hero-title retro-title">Driving The Web Forward</p>
    <p>2024 in 3 main categories</p>
  </div>
  <NavBento />
</section>

<script>
  const particles = document.getElementById("particles");
  const particlesArray = Array.from(particles.children);

  const random = (min, max) => Math.floor(Math.random() * (max - min) + min);
  const randomNeg = (value) => (Math.random() > 0.5 ? value : -value);

  particlesArray.forEach((particle) => {
    let randomX = randomNeg(random(85, 52));
    let randomY = randomNeg(random(85, 0));

    particle.style.translate = `${randomX}cqi ${randomY}cqb`;
    particle.style.transitionDelay = `${random(0, 500)}ms`;
    particle.style.transitionDuration = `${random(1500, 7000)}ms`;
  });
</script>

<style>
  @layer components.hero {
    .hero {
      margin-block: var(--size-12);
      max-inline-size: 1024px;
      margin-inline: auto;
      padding-inline: var(--size-5);
      display: grid;
      gap: var(--size-8);

      > h1 {
        font-size: clamp(3rem, 4vw, 8rem);
        text-align: center;
        max-inline-size: 100%;

        > span {
          display: inline-block;
          border-radius: var(--radius-2);
          margin-inline-start: var(--size-2);
          padding-inline: var(--size-3);
          padding-block: var(--size-1);
          text-box: trim-both cap alphabetic;
          box-shadow: 0 0 0 var(--border-size-2);
        }
      }

      p {
        text-align: center;
        max-inline-size: max-content;
        margin-inline: auto;
      }

      .hero-title {
        margin-block-start: var(--size-12);
        margin-block-end: var(--size-5);
        font-size: clamp(4rem, 8vw, 13rem);
      }
    }

    .video {
      z-index: 1;
      aspect-ratio: 16/9;
      background: var(--surface-3);
      border-radius: var(--radius-3);

      display: grid;
      place-content: center;

      @media (prefers-reduced-motion: no-preference) {
        transition: clip-path 3s var(--ease-2);
        clip-path: inset(0 0 0 0 round 30px);

        @starting-style {
          clip-path: inset(100px 100px 100px 100px round 30px);
        }
      }

      > svg {
        block-size: 5rem;
        inline-size: 5rem;
      }
    }

    .particles {
      position: relative;
      display: grid;
      place-items: center;
      container-type: size;

      > span {
        position: absolute;
        transition: translate 1s var(--ease-spring-5);

        &.pixel {
          width: 1rem;
          height: 1rem;
          opacity: 0.8;
          background: var(--blue-5);

          &:nth-of-type(2n) {
            background: var(--blue-2);
          }
        }

        &.plus {
          --_color: color-mix(in oklab, var(--blue-5), transparent 25%);

          width: 3rem;
          height: 3rem;
          opacity: 0.8;
          background: linear-gradient(
              to right,
              #0000 0 1rem,
              var(--_color) 1rem 2rem,
              #0000 2rem 3rem
            ),
            linear-gradient(
              to bottom,
              #0000 0 1rem,
              var(--_color) 1rem 2rem,
              #0000 2rem 3rem
            );
          background-blend-mode: screen;

          &:nth-of-type(2n) {
            --_color: var(--blue-3);
          }
        }

        &.star {
          width: 5rem;
          height: 5rem;
          opacity: 0.8;
          background: conic-gradient(
              color-mix(in oklab, var(--blue-5), transparent 25%) 0 0
            ),
            linear-gradient(
              to right,
              #0000 0 2rem,
              color-mix(in oklab, var(--blue-6), transparent 25%) 2rem 3rem,
              #0000 3rem 5rem
            ),
            linear-gradient(
              to bottom,
              #0000 0 2rem,
              color-mix(in oklab, var(--blue-4), transparent 25%) 2rem 3rem,
              #0000 3rem 5rem
            );
          background-size:
            3rem 3rem,
            cover,
            cover;
          background-repeat: no-repeat;
          background-position: center;
          background-blend-mode: screen;
        }
      }
    }
  }
</style>
