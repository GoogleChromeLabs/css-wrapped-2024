---
import authors from './../data/authors.json';

const authorKeys = Object.keys(authors).reverse();
const authorInfo = Object.values(authors).reverse();
---

<div class="avatars">
    {authorInfo.map((author, index) => <a name={`author-profile-${authorKeys[index]}`} href={author.url} title={author.name}><span style={`position-anchor: --${authorKeys[index]}`}>{author.name}</span><img alt={`Profile image for ${author.name}`} class="avatar" height="96" width="96" src={author.image} style={`anchor-name: --${authorKeys[index]}`}></a>)}
</div>

<style>
    .avatars {
        --color-core-primary: var(--link);
        --color-core-tertiary: var(--link-visited);
        --color-core-bg: var(--surface-document);
        
        --color-avatars-background: var(--surface-document);

        --gap: 0.1em;
        --avatar-size: 2.5em;
        --overlap-size: 1.5em;
        --hover-overlap-size: 2em;
        --border-size: 5px;

        --num-children: 4; /* Ideally, this is computed. Oh well */
        --num-children-1: calc(var(--num-children) - 1);
        
        display: grid;
        gap: var(--gap);
        padding: var(--gap);
        margin: 0 auto;
        
        grid-auto-flow: column;
        grid-template-columns: repeat(var(--num-children), var(--grid-cell-size-to-use));
        width: calc(var(--grid-cell-size-to-use) * var(--num-children-1) + var(--gap) * var(--num-children) + var(--avatar-size) + var(--border-size));
        transition: all ease-in-out 0.25s;
    
        direction: rtl; /* Reverse the order, so the last one shows first */

        @media (width >= 720px) {
            --gap: 0.1em;
            --avatar-size: 5em;
            --overlap-size: 3em;
            --hover-overlap-size: 4em;
            --border-size: 0.5em;
        }
    }

    .avatars {
        --grid-cell-size-to-use: calc(var(--overlap-size) + (var(--border-size) * var(--num-children)));
    }
    :is(
        .avatars:hover,
        .avatars:not(hover):has(> :focus) /* Also grow when tabbing into the list */
    ) {
        --grid-cell-size-to-use: calc(var(--hover-overlap-size, var(--avatar-size)) + (var(--border-size) * var(--num-children)));
    }

    .avatars > a {
        width: var(--avatar-size);
        aspect-ratio: 1;
        height: auto;
        outline: none;
    }

    .avatars img {
        width: 100%;
        height: auto;
        box-sizing: content-box;
        
        --border-color: var(--color-core-primary);
        outline: var(--border-size) solid var(--border-color);
        outline-offset: calc(var(--border-size) * -2); /* 1px extra to cater for rounding errors */
        padding: var(--border-size);
        
        border: var(--border-size) solid var(--color-avatars-background);
        border-radius: var(--avatar-size);
        // scale: 1;
        transition: all ease-in-out 0.15s;
    }

    .avatars :is(:hover, :focus) > img {
        transform-origin: 50% 50%;
        --border-color: var(--color-core-tertiary);
        scale: 1.1;
    }

    .avatars span {
        display: none;
    }
    @supports (position-area: bottom center) {
        .avatars span {
            position: absolute;
            position-area: bottom;
            white-space: nowrap;
            height: auto;
            z-index: 2;
            color: unset;
            border: 1px solid var(--surface-2);
            background: var(--surface-1);
            border-radius: var(--radius-round);
            padding-block: var(--size-2);
            padding-inline: var(--size-3);
        }

        .avatars :is(:hover, :focus) > span {
            display: block;
        }
    }
</style>