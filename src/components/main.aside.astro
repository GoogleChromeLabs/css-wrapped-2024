---
import { Icon } from "astro-icon/components";
import slugify from "./../util/slugify";

const { biomes } = Astro.props;
---

<nav popover id="mobile-menu" class="mobile-sidenav">
  <header>
    <h2 class="retro-title">CSS Wrapped</h2>
  </header>
  {
    biomes.map((biome) => {
      return (
        <section>
          <h2>{biome.title}</h2>
          <ul>
            {biome.features.map((feature) => {
              return (
                <li
                  style={`--_view-timeline: --vtl--${slugify(biome.title)}--${slugify(feature.title)};`}
                >
                  <a
                    href={`#${slugify(feature.title)}`}
                    set:html={feature.title}
                  />
                </li>
              );
            })}
          </ul>
        </section>
      );
    })
  }
</nav>

<aside>
  <div class="dynamic-aside">
    <div class="track">
      <Icon name="dino" size="2.5rem" />
    </div>
    <nav>
      {
        biomes.map((biome, i) => {
          return (
            <details
              name="main-aside"
              id={`details-${slugify(biome.title)}`}
              open={i === 0 ? "open" : null}
            >
              <summary>{biome.title}</summary>
              <ul>
                {biome.features.map((feature) => {
                  return (
                    <li
                      style={`--_view-timeline: --vtl--${slugify(biome.title)}--${slugify(feature.title)};`}
                    >
                      <a
                        href={`#${slugify(feature.title)}`}
                        set:html={feature.title}
                      />
                    </li>
                  );
                })}
              </ul>
            </details>
          );
        })
      }
    </nav>
  </div>
</aside>

<script>
  // open details to appropriate section
  const { matches: mobileLayout } = window.matchMedia("(width <= 1200px)");
  const layoutEvent = window.matchMedia("(width <= 1200px)");

  // flip car based on scroll direction
  const tracks = document.querySelectorAll(".track");

  function decideFlip(e) {
    const st = window.pageYOffset || document.documentElement.scrollTop;
    // @ts-ignore
    const direction = st > e.target.lastScrollTop ? "down" : "up";

    for (let track of tracks) {
      // @ts-ignore
      track.style.setProperty(
        "--scroll-direction",
        direction == "down" ? 1 : -1
      );
    }

    // @ts-ignore
    e.target.lastScrollTop = st <= 0 ? 0 : st;
  }

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const details = document.querySelector(
            `#${entry.target.getAttribute("data-details-target")}`
          );
          details.setAttribute("open", "");
        }
      });
    },
    {
      threshold: 0,
    }
  );

  function observeForSidenav() {
    document.querySelectorAll(".biome > section").forEach((biome) => {
      observer.observe(biome);
    });
    document.addEventListener("scroll", decideFlip, { passive: true });
  }

  function unobserveForSidenav() {
    document.querySelectorAll(".biome > section").forEach((biome) => {
      observer.unobserve(biome);
    });
    document.removeEventListener("scroll", decideFlip);
  }

  layoutEvent.onchange = (e) => {
    if (e.matches) {
      unobserveForSidenav();
    } else {
      observeForSidenav();
    }
  };

  if (!mobileLayout) {
    observeForSidenav();
  }
</script>

<style>
  @layer components.aside {
    aside {
      grid-area: main-sidenav;
      grid-row: 1;
      container: main-aside / inline-size;

      @media (width <= 1200px) {
        display: none;
      }
    }

    .dynamic-aside {
      display: grid;
      grid-template-columns: 50px 1fr;
      align-self: start;
      position: sticky;
      margin-block-start: 30vh; /* todo: use JS to calc this? */
      top: var(--size-3);
      block-size: calc(100dvh - (var(--size-3) * 2));

      > nav {
        block-size: max-content;
        display: grid;
        border-radius: var(--radius-3);
        overflow: clip;
        box-shadow: var(--shadow-5);

        > details {
          background: light-dark(white, var(--surface-2));

          @media (prefers-reduced-motion: no-preference) {
            interpolate-size: allow-keywords;
          }

          &::details-content {
            opacity: 0;
            block-size: 0;
            overflow-y: clip;
            transition:
              content-visibility 0.5s allow-discrete,
              opacity 0.5s,
              block-size 0.5s;
          }

          &[open]::details-content {
            opacity: 1;
            block-size: auto;
          }
        }

        > details:nth-child(1) {
          &,
          & > summary {
            border-bottom-left-radius: 0;
            border-bottom-right-radius: 0;
          }
        }

        > details:nth-child(2) {
          &,
          & > summary {
            border-radius: 0;
          }
        }

        > details:nth-child(3) {
          &,
          & > summary {
            border-top-left-radius: 0;
            border-top-right-radius: 0;
          }
        }
      }

      ul {
        padding: 0;
        display: grid;

        > li {
          display: flex;
          position: relative;

          padding-inline: var(--size-3);
          padding-block: var(--size-2);

          &::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            background: var(--link);

            inline-size: 3px;
            block-size: 100%;

            transform: scaleY(0);
            animation: i-spy linear;
            animation-timeline: var(--_view-timeline);
          }

          & code {
            padding: 0;
            background: none;
          }
        }
      }
    }

    .track {
      /* managed by script */
      --scroll-direction: 1;

      container-type: size;
      position: relative;
      width: 10px;
      background-image: url(/track-grunge.svg);
      background-repeat: repeat-y;
      border-right: 10px solid transparent;
      border-image: linear-gradient(to right, #0000 9px 0, var(--text-1) 0);
      border-image-slice: 11 fill;

      &::before,
      &::after {
        content: url(/cactus.svg);
        width: 15px;
        height: 5px;
        rotate: 90deg;
        position: absolute;
        top: 80%;
        left: 22px;
      }

      &::after {
        top: 20%;
        left: 30px;
      }

      > [data-icon] {
        max-inline-size: initial;
        color: var(--text-1);
      }

      @media (prefers-reduced-motion: no-preference) {
        @supports (animation-timeline: view()) {
          > [data-icon] {
            animation: truck-ride linear both;
            animation-timeline: view();
            view-timeline: --features-view;
            animation-range-start: entry calc(100vh - 3rem);
          }
        }
        @supports not (animation-timeline: view()) {
          > [data-icon] {
            display: none;
          }
        }
      }
    }

    .mobile-sidenav {
      --_left-pad: var(--size-8);
      --_x: calc(var(--_left-pad) / 2 * -1);

      block-size: 100dvh;
      max-block-size: 100dvh;
      overflow: auto;

      display: grid;
      align-content: start;
      gap: var(--size-7);

      padding-block: var(--size-3);
      padding-inline: var(--_left-pad) var(--size-5);

      @media (width > 1200px) {
        display: none;
      }

      @media (prefers-reduced-motion: no-preference) {
        transition:
          translate 0.5s var(--ease-spring-1),
          box-shadow 0.5s ease,
          display 0.5s linear allow-discrete,
          overlay 0.5s linear allow-discrete;
      }

      &:not(:popover-open) {
        translate: -100% 0;
      }

      &:popover-open {
        translate: var(--_x) 0;
        box-shadow:
          3px 0px 2px #00000005,
          8px 0px 5px #00000007,
          15px 0px 10px #00000008,
          27px 0px 18px #0000000a,
          50px 0px 33px #0000000c,
          119px 0px 80px #00000011;

        @starting-style {
          translate: -100% 0;
        }
      }

      > header {
        > h2 {
          font-size: var(--font-size-8);
        }
      }

      > section {
        display: grid;
        gap: var(--size-2);
      }

      h2 {
        font-size: var(--font-size-4);
      }

      ul {
        list-style-type: none;
        padding: 0;
        display: grid;
        border-left: 1px solid var(--surface-2);

        > li {
          padding-inline-start: var(--size-5);
          line-height: 2;
          position: relative;

          &::before {
            content: "";
            position: absolute;
            top: 0;
            left: -2px;
            background: var(--link);
            inline-size: 4px;
            block-size: 100%;

            transform: scaleY(0);
            animation: i-spy linear;
            animation-timeline: var(--_view-timeline);
          }

          > a:not(:hover, :focus-visible) {
            color: var(--text-2);
          }
        }
      }
    }
  }
</style>

<style is:global>
  @keyframes truck-ride {
    from {
      transform: rotate(0.25turn) translateX(0cqb)
        scaleX(calc(var(--scroll-direction, 0)));
    }

    to {
      transform: rotate(0.25turn) translateX(calc(100cqb - 1ch))
        scaleX(calc(var(--scroll-direction, 0)));
    }
  }

  @keyframes i-spy {
    entry 0% {
      transform-origin: top;
      transform: scaleY(0);
    }
    entry 25% {
      transform-origin: top;
      transform: scaleY(1);
    }

    exit 75% {
      transform-origin: bottom;
      transform: scaleY(1);
    }
    exit 100% {
      transform-origin: bottom;
      transform: scaleY(0);
    }
  }
</style>
